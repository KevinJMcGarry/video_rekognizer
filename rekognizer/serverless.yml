

service: rekognizer # NOTE: update this with your service name

provider:
  name: aws
  runtime: python3.6
  profile: ${file(../config.${self:provider.stage}.json):rekognizer.profile}
  stage: "dev"
  region: ${file(../config.${self:provider.stage}.json):rekognizer.region}

  iamRoleStatements:
  - Effect: "Allow"
    Action:
    - "rekognition:*"  # allow lambda function to use all rekognition methods
    Resource: "*"      # on any resource in aws (in this case S3 - need to fine tune this)
  - Effect: "Allow"
    Action:
    - "s3:GetObject"  # allow lambda function the ability to get any s3 object
    Resource:         # on the bucket dynamically defined below
    - Fn::Join:  # join arn with /*
      - ''
      - - ${self:custom.videosBucketArn}
        - '/*'  # needed to give lambda access to the objects inside bucket

custom:  # custom variables defined below
  videosBucketArn:
    Fn::Join:  # use join function (a function defined by CloudFormation) - takes two arguments
    - ':'  # delimeter that joins the list of strings (below) together with
    - - arn
      - aws
      - s3
      - ''  # space
      - ''  # space
      - ${file(../config.${self:provider.stage}.json):rekognizer.videos_bucket}  # bucketname

functions:
  startProcessingVideo:
    handler: handler.start_processing_video
    # connect events to our function
    events:
      - s3:
          bucket: ${file(../config.${self:provider.stage}.json):rekognizer.videos_bucket}  # serverless will create this bucket for us
          event: s3:ObjectCreated:*  # from the aws docs, this is watching for all s3 object creation events
          rules:  # rules for our event trigger
            - suffix: .mp4  # only trigger the handler when the uploaded file's extension is .mp4
